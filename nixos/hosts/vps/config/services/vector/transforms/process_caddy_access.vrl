# Attempt to resolve the IP address as a GeoIP city record
# Read https://vector.dev/docs/reference/vrl/functions/#get_enrichment_table_record for the
# returned data on success
._vector.geoip = get_enrichment_table_record(
    "geolite2_city",
    { "ip": .request.client_ip }
) ?? null

# Parse the user agent of the request
ua, err = string(.request.headers."User-Agent"[0])
if err == null {
    parsed = parse_user_agent(ua, mode: "enriched")

    ._vector.user_agent = {
        "browser": parsed.browser.family,
        "os": parsed.os.family,
        "device": parsed.device.category,
    }
}

# Obscure sensitive fields with truncated hashes
redact_paths = [
    # Redact all possible locations of source IP
    [ "request", "client_ip" ],
    [ "request", "remote_ip" ],
    [ "request", "headers", "X-Forwarded-For" ],
    [ "request", "headers", "CF-Connecting-IP" ],
    [ "request", "headers", "CF-Connecting-IPv6" ],
    [ "request", "headers", "True-Client-IP" ],
    # Other potentially identifying information
    [ "request", "headers", "CF-Ray" ],
]
for_each(redact_paths) -> |_, redact_path| {
    # Check if the path exists and needs to be redacted first
    value, err = string(get!(., redact_path))
    if err == null {
        # Take the first 6 bytes of the sha3 base64 hash and base64 encode them
        # Collision probability: 0.1% with 1 million hashes
        truncated_hash = encode_base64(
            slice!(
                decode_base16!(sha3(value)),
                start: 0,
                end: 6
            )
        )

        . = set!(., redact_path, truncated_hash)
    }
}
